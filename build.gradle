buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.30"
    id "com.github.johnrengelman.shadow" version "2.0.3"
}


allprojects {
    repositories {
        jcenter()
    }
}

configure(subprojects) {
    apply plugin: "idea"
    apply plugin: "kotlin"
    apply plugin: "com.github.johnrengelman.shadow"

    ext {
        applicationVendor = "foresta.me"
        applicationVersion = '1.0-SNAPSHOT'
    }

    group 'org.example'
    project.version '1.0-SNAPSHOT'


    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    tasks.withType(SourceTask).findAll { it.hasProperty("options") }*.options*.encoding = "UTF-8"

    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources"
            }
        }
    }

    jar {
        manifest {
            attributes "Implementation-Vendor-Id": applicationVendor
            attributes "Implementation-Vendor": applicationVendor
            attributes "Implementation-Version": applicationVersion
            attributes "Implementation-Title": project.name
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    task mkdirs {
        doLast {
            [
                "src/main/kotlin",
                "src/main/resources",
                "src/test/kotlin",
                "src/test/resources"
            ].each {
                def path = "${projectDir}/${it}"
                ant.mkdir(dir: path)
                if (new File(path).listFiles().length == 0) {
                    ant.touch(file: "${path}/.gitkeep")
                }
            }
        }
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        testCompile("org.amshove.kluent:kluent:1.38") {
            exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
            exclude group: "org.jetbrains.kotlin", module: "kotlin-reflect"
        }
        testCompile "org.junit.jupiter:junit-jupiter-api:5.2.0"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:5.2.0"
    }
}

task mkdirs {
    description "Mae dires"
    dependsOn subprojects*.tasks.mkdirs
}

wrapper {
    gradleVersion = '4.8.1'
}

project("sample-application") {
    dependencies {
        compile project(":sample-domain")
    }
}

project("sample-cli") {
    dependencies {
        compile project(":sample-application")
    }
    shadowJar {
        baseName = "sample-cli"
        version = applicationVersion
        manifest {
            attributes "Main-Class": "org.example.cli.Main"
        }
    }
}

project("sample-web") {
    dependencies {
        compile project(":sample-application")
        compile project(":sample-infrastructure")
    }
    shadowJar {
        baseName = "sample-web"
        version = applicationVersion
        manifest {
            attributes "Main-Class": "org.example.web.Main"
        }
    }
}

project("sample-domain") {
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        compile "org.jetbrains.kotlin:kotlin-reflect"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.0"
    }
}

project("sample-infrastructure") {
    dependencies {
        compile project(":sample-domain")
    }
}
